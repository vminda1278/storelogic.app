{"version":3,"file":"types.js","sources":["../../../src/types.ts"],"sourcesContent":["import {Session} from '@shopify/shopify-api';\n\n/**\n * Defines the strategy to be used to store sessions for the Shopify App.\n */\nexport interface SessionStorage {\n  /**\n   * Creates or updates the given session in storage.\n   *\n   * @param session Session to store\n   */\n  storeSession(session: Session): Promise<boolean>;\n\n  /**\n   * Loads a session from storage.\n   *\n   * @param id Id of the session to load\n   */\n  loadSession(id: string): Promise<Session | undefined>;\n\n  /**\n   * Deletes a session from storage.\n   *\n   * @param id Id of the session to delete\n   */\n  deleteSession(id: string): Promise<boolean>;\n\n  /**\n   * Deletes an array of sessions from storage.\n   *\n   * @param ids Array of session id's to delete\n   */\n  deleteSessions(ids: string[]): Promise<boolean>;\n\n  /**\n   * Return an array of sessions for a given shop (or [] if none found).\n   *\n   * @param shop shop of the session(s) to return\n   */\n  findSessionsByShop(shop: string): Promise<Session[]>;\n}\n\n/**\n * define the option required to instantiate an RDBMS session storage implementation\n */\nexport interface RdbmsSessionStorageOptions {\n  sessionTableName: string;\n  migratorOptions?: RdbmsSessionStorageMigratorOptions;\n}\n\n/**\n * Define a common way for migrator to execute query on the underlying persistence layer\n */\nexport interface DBConnection {\n  /** the table used to store sessions */\n  sessionStorageIdentifier: string;\n\n  /**\n   * Initiate the actual connection to the underlying database\n   */\n  connect(): Promise<void>;\n\n  /**\n   * Disconnect from the underlying database\n   */\n  disconnect(): Promise<void>;\n}\n\n/**\n * This is for the use cases of the RDBMS database where\n */\nexport interface RdbmsConnection extends DBConnection {\n  /**\n   * Make a query to the underlying DB\n   * @param query - the query to execute\n   * @param params - the parameters required by the query\n   */\n  query(query: string, params: any[]): Promise<any[]>;\n\n  /**\n   * Determine if a table exist\n   * @param tablename - the table to search\n   */\n  hasTable(tablename: string): Promise<boolean>;\n\n  /**\n   * Based on the the #sqlArgumentPlaceholder value and the underlying engine, return the place holder for a given position in a list of sql argument\n   * @param position the position of the given sql argument\n   */\n  getArgumentPlaceholder(position?: number): string;\n}\n\n/**\n * Each migration 'migration_name' will be define the following way.\n * Via a function that receive the engine in parameter.\n */\nexport type MigrationFunction = (engine: DBConnection) => Promise<void>;\n\n/**\n * Defines what is needed for a migration to be execute\n */\nexport class MigrationOperation {\n  /** Name of the migration that will be used to uniquely identity it among all other migration */\n  migrationName: string;\n\n  /** The actual migration function that will modify the perisitence storage */\n  migrationFunction: MigrationFunction;\n\n  constructor(migrationName: string, migrationFunction: MigrationFunction) {\n    this.migrationName = migrationName;\n    this.migrationFunction = migrationFunction;\n  }\n}\n\n/**\n * Defines how database migration will be handled.\n */\nexport interface SessionStorageMigrator {\n  /**\n   * Should ensure that the persistence 'table' is created if it does not exist yet.\n   */\n  initMigrationPersistence(): Promise<void>;\n\n  /**\n   * Returns true if the migrationName as already been applied and\n   * therefore the migrator should not apply it. if false,\n   * the migrator will run the associated migration\n   * @param migrationName the unique version name to look for in the migration table\n   */\n  hasMigrationBeenApplied(migrationName: string): Promise<boolean>;\n\n  /**\n   * Will persist that this migrationName has been applied in the migration table\n   * @param migrationName the version to persisited as applied\n   */\n  saveAppliedMigration(migrationName: string): Promise<void>;\n\n  /**\n   * Return a list MigrationOperation that needs to be executed\n   */\n  getMigrationList(): MigrationOperation[];\n\n  /**\n   * Will iterate over the map returned by #getmigrationList,\n   * for each entry call #hasMigrationBeenApplied, if it returns false\n   * it will execute execute the function and then call #saveAppliedMigration\n   * @param databaseReady - so that the migrator can wait for the database to fully up and running\n   * before starting its execution.\n   */\n  applyMigrations(databaseReady: Promise<void>): Promise<void>;\n}\n\n/**\n * Use to initialise session storage migrators\n */\nexport interface SessionStorageMigratorOptions {\n  migrationDBIdentifier: string;\n}\n\nexport const defaultSessionStorageMigratorOptions: SessionStorageMigratorOptions =\n  {\n    migrationDBIdentifier: 'shopify_sessions_migrations',\n  };\n\nexport interface RdbmsSessionStorageMigratorOptions\n  extends SessionStorageMigratorOptions {\n  migrationNameColumnName: string;\n}\n\nexport const defaultRdbmsSessionStorageMigratorOptions: RdbmsSessionStorageMigratorOptions =\n  {\n    migrationDBIdentifier: 'shopify_sessions_migrations',\n    migrationNameColumnName: 'migration_name',\n  };\n"],"names":[],"mappings":";;AAkGA;;AAEG;MACU,kBAAkB,CAAA;;AAE7B,IAAA,aAAa;;AAGb,IAAA,iBAAiB;IAEjB,WAAA,CAAY,aAAqB,EAAE,iBAAoC,EAAA;AACrE,QAAA,IAAI,CAAC,aAAa,GAAG,aAAa;AAClC,QAAA,IAAI,CAAC,iBAAiB,GAAG,iBAAiB;IAC5C;AACD;AA+CM,MAAM,oCAAoC,GAC/C;AACE,IAAA,qBAAqB,EAAE,6BAA6B;;AAQjD,MAAM,yCAAyC,GACpD;AACE,IAAA,qBAAqB,EAAE,6BAA6B;AACpD,IAAA,uBAAuB,EAAE,gBAAgB;;;;;;;"}