'use strict';

var shopifyApi = require('@shopify/shopify-api');
require('../../../types.js');
var respondToInvalidSessionToken = require('../../helpers/respond-to-invalid-session-token.js');
var invalidateAccessToken = require('../../helpers/invalidate-access-token.js');
require('isbot');

function checkBillingFactory(params, request, session) {
    return async function checkBilling(options = {}) {
        const { api, logger } = params;
        logger.debug('Checking billing plans', { shop: session.shop, ...options });
        try {
            return await api.billing.check({
                session,
                plans: options.plans,
                isTest: options.isTest,
                returnObject: true,
            });
        }
        catch (error) {
            if (error instanceof shopifyApi.HttpResponseError && error.response.code === 401) {
                logger.debug('API token was invalid, responding to invalid session', {
                    shop: session.shop,
                });
                await invalidateAccessToken.invalidateAccessToken(params, session);
                throw respondToInvalidSessionToken.respondToInvalidSessionToken({
                    params,
                    request,
                    retryRequest: true,
                });
            }
            throw error;
        }
    };
}

exports.checkBillingFactory = checkBillingFactory;
//# sourceMappingURL=check.js.map
