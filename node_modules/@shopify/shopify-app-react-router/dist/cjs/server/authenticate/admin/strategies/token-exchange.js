'use strict';

var shopifyApi = require('@shopify/shopify-api');
require('../../../types.js');
var respondToInvalidSessionToken = require('../../helpers/respond-to-invalid-session-token.js');
var getShopFromRequest = require('../../helpers/get-shop-from-request.js');
var invalidateAccessToken = require('../../helpers/invalidate-access-token.js');
require('isbot');
require('react-router');
var handleClientError = require('../helpers/handle-client-error.js');
var triggerAfterAuthHook = require('../helpers/trigger-after-auth-hook.js');

const createTokenExchangeStrategy = (params) => {
    const { api, config, logger } = params;
    async function exchangeToken({ request, shop, sessionToken, requestedTokenType, }) {
        try {
            return await api.auth.tokenExchange({
                sessionToken,
                shop,
                requestedTokenType,
            });
        }
        catch (error) {
            if (error instanceof shopifyApi.InvalidJwtError ||
                (error instanceof shopifyApi.HttpResponseError &&
                    error.response.code === 400 &&
                    error.response.body?.error === 'invalid_subject_token')) {
                throw respondToInvalidSessionToken.respondToInvalidSessionToken({
                    params: { api, config, logger },
                    request,
                    retryRequest: true,
                });
            }
            throw new Response(undefined, {
                status: 500,
                statusText: 'Internal Server Error',
            });
        }
    }
    async function handleAfterAuthHook(session, request, sessionToken) {
        await config.idempotentPromiseHandler.handlePromise({
            promiseFunction: () => {
                return triggerAfterAuthHook.triggerAfterAuthHook(params, session, request, {
                    authenticate,
                    handleClientError: handleClientError$1,
                });
            },
            identifier: sessionToken,
        });
    }
    async function authenticate(request, sessionContext) {
        const { shop, session, sessionToken } = sessionContext;
        if (!sessionToken)
            throw new shopifyApi.InvalidJwtError();
        if (!session || !session.isActive(undefined)) {
            logger.info('No valid session found', { shop });
            logger.info('Requesting offline access token', { shop });
            const { session: offlineSession } = await exchangeToken({
                request,
                sessionToken,
                shop,
                requestedTokenType: shopifyApi.RequestedTokenType.OfflineAccessToken,
            });
            await config.sessionStorage.storeSession(offlineSession);
            let newSession = offlineSession;
            if (config.useOnlineTokens) {
                logger.info('Requesting online access token', { shop });
                const { session: onlineSession } = await exchangeToken({
                    request,
                    sessionToken,
                    shop,
                    requestedTokenType: shopifyApi.RequestedTokenType.OnlineAccessToken,
                });
                await config.sessionStorage.storeSession(onlineSession);
                newSession = onlineSession;
            }
            logger.debug('Request is valid, loaded session from session token', {
                shop: newSession.shop,
                isOnline: newSession.isOnline,
            });
            try {
                await handleAfterAuthHook(newSession, request, sessionToken);
            }
            catch (errorOrResponse) {
                if (errorOrResponse instanceof Response) {
                    throw errorOrResponse;
                }
                throw new Response(undefined, {
                    status: 500,
                    statusText: 'Internal Server Error',
                });
            }
            return newSession;
        }
        return session;
    }
    function handleClientError$1(request) {
        return handleClientError.handleClientErrorFactory({
            request,
            onError: async ({ session, error }) => {
                if (error.response.code === 401) {
                    logger.debug('Responding to invalid access token', {
                        shop: getShopFromRequest.getShopFromRequest(request),
                    });
                    await invalidateAccessToken.invalidateAccessToken({ config, logger }, session);
                    respondToInvalidSessionToken.respondToInvalidSessionToken({
                        params: { config, api, logger },
                        request,
                    });
                }
            },
        });
    }
    return {
        authenticate,
        handleClientError: handleClientError$1,
    };
};

exports.createTokenExchangeStrategy = createTokenExchangeStrategy;
//# sourceMappingURL=token-exchange.js.map
