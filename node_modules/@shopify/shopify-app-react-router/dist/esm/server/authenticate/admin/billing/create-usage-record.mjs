import { HttpResponseError } from '@shopify/shopify-api';
import '../../../types.mjs';
import { respondToInvalidSessionToken } from '../../helpers/respond-to-invalid-session-token.mjs';
import { invalidateAccessToken } from '../../helpers/invalidate-access-token.mjs';
import 'isbot';

function createUsageRecordFactory(params, request, session) {
    return async function createUsageRecord(options) {
        const { api, logger } = params;
        logger.debug('Create usage record', { shop: session.shop, ...options });
        try {
            return await api.billing.createUsageRecord({
                ...options,
                session,
            });
        }
        catch (error) {
            if (error instanceof HttpResponseError && error.response.code === 401) {
                logger.debug('API token was invalid, responding to invalid session', {
                    shop: session.shop,
                });
                await invalidateAccessToken(params, session);
                throw respondToInvalidSessionToken({
                    params,
                    request,
                    retryRequest: true,
                });
            }
            throw error;
        }
    };
}

export { createUsageRecordFactory };
//# sourceMappingURL=create-usage-record.mjs.map
