import { HttpResponseError } from '@shopify/shopify-api';
import '../../../types.mjs';
import { respondToInvalidSessionToken } from '../../helpers/respond-to-invalid-session-token.mjs';
import { invalidateAccessToken } from '../../helpers/invalidate-access-token.mjs';
import 'isbot';

function requireBillingFactory(params, request, session) {
    const { api, logger } = params;
    return async function requireBilling(options) {
        const logContext = {
            shop: session.shop,
            plans: options.plans,
            isTest: options.isTest,
        };
        logger.debug('Checking billing for the shop', logContext);
        let data;
        try {
            data = await api.billing.check({
                session,
                plans: options.plans,
                isTest: options.isTest,
                returnObject: true,
            });
        }
        catch (error) {
            if (error instanceof HttpResponseError && error.response.code === 401) {
                logger.debug('API token was invalid, responding to invalid session', logContext);
                await invalidateAccessToken(params, session);
                throw respondToInvalidSessionToken({
                    params,
                    request,
                    retryRequest: true,
                });
            }
            throw error;
        }
        if (!data.hasActivePayment) {
            logger.debug('Billing check failed', logContext);
            throw await options.onFailure(new Error('Billing check failed'));
        }
        logger.debug('Billing check succeeded', logContext);
        return data;
    };
}

export { requireBillingFactory };
//# sourceMappingURL=require.mjs.map
