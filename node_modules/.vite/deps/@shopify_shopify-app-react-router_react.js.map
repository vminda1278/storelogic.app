{
  "version": 3,
  "sources": ["../../@shopify/src/react/components/AppProvider/AppProvider.tsx", "../../@shopify/src/react/components/AppProxyProvider/AppProxyProvider.tsx", "../../@shopify/src/react/components/AppProxyLink/AppProxyLink.tsx"],
  "sourcesContent": ["import React, {useEffect} from 'react';\nimport {useNavigate} from 'react-router';\n\ninterface BaseProps {\n  children: React.ReactNode;\n}\n\ninterface EmbeddedProps extends BaseProps {\n  /**\n   * If this route should be rendered inside the Shopify admin.\n   *\n   * Setting this to true will include the App Bridge script on the page.\n   * If true and the route is loaded outside the Shopify admin, then the user will be redirected to the Shopify admin.\n   *\n   * Setting this to false will not include the App Bridge script on the page.\n   *\n   * {@link https://shopify.dev/docs/apps/admin/embedded-app-home}\n   */\n  embedded: true;\n  /**\n   * The API key for your Shopify app. This is the `Client ID` from the Partner Dashboard.\n   *\n   * When using the Shopify CLI, this is the `SHOPIFY_API_KEY` environment variable. If you're using the environment\n   * variable, then you need to pass it from the loader to the component.\n   */\n  apiKey: string;\n}\n\ninterface NonEmbeddedProps extends BaseProps {\n  /**\n   * If this route should be rendered inside the Shopify admin.\n   *\n   * Setting this to false means only Polaris Web components will be added to the route, not App Bridge.\n   *\n   * Setting this to true will include the App Bridge script on the page.\n   *\n   * {@link https://shopify.dev/docs/apps/admin/embedded-app-home}\n   */\n  embedded?: false;\n}\n\nexport type AppProviderProps = NonEmbeddedProps | EmbeddedProps;\n\n/**\n * Sets up your app to look like the admin\n *\n * Adds Polaris Web components to the route.\n * If embedded is true and apiKey is provided, then the App Bridge script will be added to the page.\n *\n * {@link https://shopify.dev/docs/apps/admin/embedded-app-home}\n * {@link https://shopify.dev/docs/api/app-home/using-polaris-components}\n * {@link https://shopify.dev/tools/app-bridge}\n *\n * @example\n * <caption>Set up AppProvider for an embedded route</caption>\n * <description>Wrap your route in the `AppProvider` component and pass in your API key.</description>\n * ```ts\n * // /app/routes/**\\/*.ts\n * import {useLoaderData} from 'react-router';\n * import {authenticate} from '~/shopify.server';\n * import {AppProvider} from '@shopify/shopify-app-react-router/react';\n *\n * export async function loader({ request }) {\n *   await authenticate.admin(request);\n *\n *   return { apiKey: process.env.SHOPIFY_API_KEY };\n * }\n *\n * export default function App() {\n *   const { apiKey } = useLoaderData();\n *\n *   return (\n *     <AppProvider embedded apiKey={apiKey}>\n *       <Outlet />\n *     </AppProvider>\n *   );\n * }\n * ```\n *\n * @example\n * <caption>Set up AppProvider for a non-embedded route</caption>\n * <description>Add Polaris web components to the route, without adding the App Bridge script.</description>\n * ```ts\n * // /app/routes/**\\/*.ts\n * import {AppProvider} from '@shopify/shopify-app-react-router/react';\n *\n * export default function App() {\n *   return (\n *     <AppProvider embedded={false}>\n *       <Outlet />\n *     </AppProvider>\n *   );\n * }\n * ```\n */\nexport function AppProvider(props: AppProviderProps) {\n  return (\n    <>\n      {props.embedded && <AppBridge apiKey={props.apiKey} />}\n      <script src=\"https://cdn.shopify.com/shopifycloud/polaris.js\" />\n      {props.children}\n    </>\n  );\n}\n\ninterface AppBridgeProps {\n  apiKey: EmbeddedProps['apiKey'];\n}\n\nfunction AppBridge({apiKey}: AppBridgeProps) {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const handleNavigate = (event: Event) => {\n      const href = (event.target as HTMLElement)?.getAttribute('href');\n      if (href) {\n        navigate(href);\n      }\n    };\n\n    document.addEventListener('shopify:navigate', handleNavigate);\n\n    return () => {\n      document.removeEventListener('shopify:navigate', handleNavigate);\n    };\n  }, [navigate]);\n\n  return (\n    <script\n      src=\"https://cdn.shopify.com/shopifycloud/app-bridge.js\"\n      data-api-key={apiKey}\n    />\n  );\n}\n", "import {createContext, useEffect, useState} from 'react';\n\nexport interface AppProxyProviderProps {\n  /**\n   * The URL where the app is hosted. You can set this from the `SHOPIFY_APP_URL` environment variable.\n   */\n  appUrl: string;\n\n  /**\n   * The children to render.\n   */\n  children?: React.ReactNode;\n}\n\ntype FormatUrlFunction = (\n  url: string | undefined,\n  addOrigin?: boolean,\n) => string | undefined;\n\ninterface AppProxyProviderContextProps {\n  appUrl: string;\n  formatUrl: FormatUrlFunction;\n  requestUrl?: URL;\n}\n\nexport const AppProxyProviderContext =\n  createContext<AppProxyProviderContextProps | null>(null);\n\n/**\n * Sets up a page to render behind a Shopify app proxy, enabling JavaScript and CSS to be loaded from the app.\n *\n * > Caution:\n * Because React Router doesn't support URL rewriting, any route using this component should <b>match the pathname of the proxy\n * URL exactly</b>, and <b>end in a trailing slash</b> (e.g., `https://<shop>/apps/proxy/`).\n *\n * @example\n * <caption>Wrap a route with an AppProxyProvider component.</caption>\n * <description>Wrap your route component in the `AppProxyProvider` component and pass in your app URL.</description>\n * ```ts\n * // /app/routes/**\\/*.ts\n * import {authenticate} from '~/shopify.server';\n * import {AppProxyProvider} from '@shopify/shopify-app-react-router/react';\n *\n * export async function loader({ request }) {\n *   await authenticate.public.appProxy(request);\n *\n *   return json({ appUrl: process.env.SHOPIFY_APP_URL });\n * }\n *\n * export default function App() {\n *   const { appUrl } = useLoaderData();\n *\n *   return (\n *     <AppProxyProvider appUrl={appUrl}>\n *       Page content\n *     </AppProxyProvider>\n *   );\n * }\n * ```\n */\nexport function AppProxyProvider(props: AppProxyProviderProps) {\n  const {children, appUrl} = props;\n  const [requestUrl, setRequestUrl] = useState<URL | undefined>();\n\n  useEffect(\n    () => setRequestUrl(new URL(window.location.href)),\n    [setRequestUrl],\n  );\n\n  return (\n    <AppProxyProviderContext.Provider\n      value={{appUrl, requestUrl, formatUrl: formatProxyUrl(requestUrl)}}\n    >\n      <base href={appUrl} />\n\n      {children}\n    </AppProxyProviderContext.Provider>\n  );\n}\n\nfunction formatProxyUrl(requestUrl: URL | undefined): FormatUrlFunction {\n  return (url: string | undefined, addOrigin = true) => {\n    if (!url) {\n      return url;\n    }\n\n    let finalUrl = url;\n\n    if (addOrigin && requestUrl && finalUrl.startsWith('/')) {\n      finalUrl = new URL(`${requestUrl.origin}${url}`).href;\n    }\n    if (!finalUrl.endsWith('/')) {\n      finalUrl = `${finalUrl}/`;\n    }\n\n    return finalUrl;\n  };\n}\n", "import {useContext} from 'react';\n\nimport {AppProxyProviderContext} from '../AppProxyProvider';\n\nexport interface AppProxyLinkProps\n  extends React.DetailedHTMLProps<\n    React.AnchorHTMLAttributes<HTMLAnchorElement>,\n    HTMLAnchorElement\n  > {\n  href: string;\n}\n\n/**\n * Sets up an `<a />` HTML element that works when rendered behind an app proxy.\n *\n * Supports any properties accepted by the `<a />` HTML element.\n *\n * @example\n * <caption>Link to a different route.</caption>\n * <description>Use an `AppProxyLink` within an `AppProxyProvider` to link to a different proxied route.</description>\n * ```ts\n * // /app/routes/**\\/*.ts\n * import {authenticate} from '~/shopify.server';\n * import {AppProxyProvider, AppProxyLink} from '@shopify/shopify-app-react-router/react';\n *\n * export async function loader({ request }) {\n *   await authenticate.public.appProxy(request);\n *\n *   return json({ appUrl: process.env.SHOPIFY_APP_URL });\n * }\n *\n * export default function App() {\n *   const { appUrl } = useLoaderData();\n *\n *   return (\n *     <AppProxyProvider appUrl={appUrl}>\n *       <AppProxyLink href=\"/other-proxy-route\">Link to another route</AppProxyLink>\n *     </AppProxyProvider>\n *   );\n * }\n * ```\n */\nexport function AppProxyLink(props: AppProxyLinkProps) {\n  const context = useContext(AppProxyProviderContext);\n\n  if (!context) {\n    throw new Error(\n      'AppProxyLink must be used within an AppProxyProvider component',\n    );\n  }\n\n  const {children, href, ...otherProps} = props;\n\n  return (\n    <a href={context.formatUrl(href)} {...otherProps}>\n      {children}\n    </a>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AA+FM,SAAU,YAAY,OAAuB;AACjD,aACEA,yBAAAC,6BAAA,EAAA,UAAA,CACG,MAAM,gBAAYC,wBAAC,WAAS,EAAC,QAAQ,MAAM,OAAM,CAAA,OAClDA,wBAAA,UAAA,EAAQ,KAAI,kDAAiD,CAAA,GAC5D,MAAM,QAAQ,EAAA,CAAA;AAGrB;AAMA,SAAS,UAAU,EAAC,OAAM,GAAiB;AACzC,QAAM,WAAW,YAAW;AAE5B,8BAAU,MAAK;AACb,UAAM,iBAAiB,CAAC,UAAgB;;AACtC,YAAM,QAAQ,WAAM,WAAN,mBAA8B,aAAa;AACzD,UAAI,MAAM;AACR,iBAAS,IAAI;MACf;IACF;AAEA,aAAS,iBAAiB,oBAAoB,cAAc;AAE5D,WAAO,MAAK;AACV,eAAS,oBAAoB,oBAAoB,cAAc;IACjE;EACF,GAAG,CAAC,QAAQ,CAAC;AAEb,aACEA,wBAAAA,UAAAA,EACE,KAAI,sDAAoD,gBAC1C,OAAM,CAAA;AAG1B;;;;;IC5Ga,8BACX,6BAAmD,IAAI;AAkCnD,SAAU,iBAAiB,OAA4B;AAC3D,QAAM,EAAC,UAAU,OAAM,IAAI;AAC3B,QAAM,CAAC,YAAY,aAAa,QAAI,wBAAQ;AAE5C,+BACE,MAAM,cAAc,IAAI,IAAI,OAAO,SAAS,IAAI,CAAC,GACjD,CAAC,aAAa,CAAC;AAGjB,aACEC,0BAAC,wBAAwB,UAAQ,EAC/B,OAAO,EAAC,QAAQ,YAAY,WAAW,eAAe,UAAU,EAAC,GAAC,UAAA,KAElEC,yBAAA,QAAA,EAAM,MAAM,OAAM,CAAA,GAEjB,QAAQ,EAAA,CAAA;AAGf;AAEA,SAAS,eAAe,YAA2B;AACjD,SAAO,CAAC,KAAyB,YAAY,SAAQ;AACnD,QAAI,CAAC,KAAK;AACR,aAAO;IACT;AAEA,QAAI,WAAW;AAEf,QAAI,aAAa,cAAc,SAAS,WAAW,GAAG,GAAG;AACvD,iBAAW,IAAI,IAAI,GAAG,WAAW,MAAM,GAAG,GAAG,EAAE,EAAE;IACnD;AACA,QAAI,CAAC,SAAS,SAAS,GAAG,GAAG;AAC3B,iBAAW,GAAG,QAAQ;IACxB;AAEA,WAAO;EACT;AACF;A;;;;ACvDM,SAAU,aAAa,OAAwB;AACnD,QAAM,cAAU,0BAAW,uBAAuB;AAElD,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MACR,gEAAgE;EAEpE;AAEA,QAAM,EAAC,UAAU,MAAM,GAAG,WAAU,IAAI;AAExC,aACEC,yBAAA,KAAA,EAAG,MAAM,QAAQ,UAAU,IAAI,GAAC,GAAM,YAAU,SACrC,CAAA;AAGf;",
  "names": ["_jsxs", "_Fragment", "_jsx", "_jsxs", "_jsx", "_jsx"]
}
