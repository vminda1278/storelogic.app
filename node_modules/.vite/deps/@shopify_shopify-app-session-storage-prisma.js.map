{
  "version": 3,
  "sources": ["../../@shopify/src/prisma.ts"],
  "sourcesContent": ["import {Session} from '@shopify/shopify-api';\nimport {SessionStorage} from '@shopify/shopify-app-session-storage';\nimport type {PrismaClient, Session as Row} from '@prisma/client';\nimport {Prisma} from '@prisma/client';\n\ninterface PrismaSessionStorageOptions {\n  tableName?: string;\n  connectionRetries?: number;\n  connectionRetryIntervalMs?: number;\n}\n\nconst UNIQUE_KEY_CONSTRAINT_ERROR_CODE = 'P2002';\n\n// eslint-disable-next-line no-warning-comments\n// TODO: Remove this when all session storages have implemented the isReady method\nexport interface PrismaSessionStorageInterface extends SessionStorage {\n  isReady(): Promise<boolean>;\n}\n\nexport class PrismaSessionStorage<T extends PrismaClient>\n  implements PrismaSessionStorageInterface\n{\n  private ready: Promise<boolean>;\n  private readonly tableName: string = 'session';\n  private connectionRetries = 2;\n  private connectionRetryIntervalMs = 5000;\n\n  constructor(\n    private prisma: T,\n    {\n      tableName,\n      connectionRetries,\n      connectionRetryIntervalMs,\n    }: PrismaSessionStorageOptions = {},\n  ) {\n    if (tableName) {\n      this.tableName = tableName;\n    }\n\n    if (connectionRetries !== undefined) {\n      this.connectionRetries = connectionRetries;\n    }\n\n    if (connectionRetryIntervalMs !== undefined) {\n      this.connectionRetryIntervalMs = connectionRetryIntervalMs;\n    }\n\n    if (this.getSessionTable() === undefined) {\n      throw new Error(`PrismaClient does not have a ${this.tableName} table`);\n    }\n\n    this.ready = this.pollForTable()\n      .then(() => true)\n      .catch((cause) => {\n        throw new MissingSessionTableError(\n          `Prisma ${this.tableName} table does not exist. This could happen for a few reasons, see https://github.com/Shopify/shopify-app-js/tree/main/packages/apps/session-storage/shopify-app-session-storage-prisma#troubleshooting for more information`,\n          cause,\n        );\n      });\n  }\n\n  public async storeSession(session: Session): Promise<boolean> {\n    await this.ensureReady();\n    const data = this.sessionToRow(session);\n\n    try {\n      await this.getSessionTable().upsert({\n        where: {id: session.id},\n        update: data,\n        create: data,\n      });\n    } catch (error) {\n      if (\n        error instanceof Prisma.PrismaClientKnownRequestError &&\n        error.code === UNIQUE_KEY_CONSTRAINT_ERROR_CODE\n      ) {\n        console.log(\n          'Caught PrismaClientKnownRequestError P2002 - Unique Key Key Constraint, retrying upsert.',\n        );\n        await this.getSessionTable().upsert({\n          where: {id: session.id},\n          update: data,\n          create: data,\n        });\n        return true;\n      }\n      throw error;\n    }\n\n    return true;\n  }\n\n  public async loadSession(id: string): Promise<Session | undefined> {\n    await this.ensureReady();\n    const row = await this.getSessionTable().findUnique({\n      where: {id},\n    });\n\n    if (!row) {\n      return undefined;\n    }\n\n    return this.rowToSession(row);\n  }\n\n  public async deleteSession(id: string): Promise<boolean> {\n    await this.ensureReady();\n    try {\n      await this.getSessionTable().delete({where: {id}});\n    } catch {\n      return true;\n    }\n\n    return true;\n  }\n\n  public async deleteSessions(ids: string[]): Promise<boolean> {\n    await this.ensureReady();\n    await this.getSessionTable().deleteMany({where: {id: {in: ids}}});\n\n    return true;\n  }\n\n  public async findSessionsByShop(shop: string): Promise<Session[]> {\n    await this.ensureReady();\n    const sessions = await this.getSessionTable().findMany({\n      where: {shop},\n      take: 25,\n      orderBy: [{expires: 'desc'}],\n    });\n\n    return sessions.map((session) => this.rowToSession(session));\n  }\n\n  public async isReady(): Promise<boolean> {\n    try {\n      await this.pollForTable();\n      this.ready = Promise.resolve(true);\n    } catch (_error) {\n      this.ready = Promise.resolve(false);\n    }\n    return this.ready;\n  }\n\n  private async ensureReady(): Promise<void> {\n    if (!(await this.ready))\n      throw new MissingSessionStorageError(\n        'Prisma session storage is not ready. Use the `isReady` method to poll for the table.',\n      );\n  }\n\n  private async pollForTable(): Promise<void> {\n    for (let i = 0; i < this.connectionRetries; i++) {\n      try {\n        await this.getSessionTable().count();\n        return;\n      } catch (error) {\n        console.log(`Error obtaining session table: ${error}`);\n      }\n      await sleep(this.connectionRetryIntervalMs);\n    }\n    throw Error(\n      `The table \\`${this.tableName}\\` does not exist in the current database.`,\n    );\n  }\n\n  private sessionToRow(session: Session): Row {\n    const sessionParams = session.toObject();\n\n    return {\n      id: session.id,\n      shop: session.shop,\n      state: session.state,\n      isOnline: session.isOnline,\n      scope: session.scope || null,\n      expires: session.expires || null,\n      accessToken: session.accessToken || '',\n      userId:\n        (sessionParams.onlineAccessInfo?.associated_user\n          .id as unknown as bigint) || null,\n      firstName:\n        sessionParams.onlineAccessInfo?.associated_user.first_name || null,\n      lastName:\n        sessionParams.onlineAccessInfo?.associated_user.last_name || null,\n      email: sessionParams.onlineAccessInfo?.associated_user.email || null,\n      accountOwner:\n        sessionParams.onlineAccessInfo?.associated_user.account_owner || false,\n      locale: sessionParams.onlineAccessInfo?.associated_user.locale || null,\n      collaborator:\n        sessionParams.onlineAccessInfo?.associated_user.collaborator || false,\n      emailVerified:\n        sessionParams.onlineAccessInfo?.associated_user.email_verified || false,\n    };\n  }\n\n  private rowToSession(row: Row): Session {\n    const sessionParams: Record<string, boolean | string | number> = {\n      id: row.id,\n      shop: row.shop,\n      state: row.state,\n      isOnline: row.isOnline,\n      userId: String(row.userId),\n      firstName: String(row.firstName),\n      lastName: String(row.lastName),\n      email: String(row.email),\n      locale: String(row.locale),\n    };\n\n    if (row.accountOwner !== null) {\n      sessionParams.accountOwner = row.accountOwner;\n    }\n\n    if (row.collaborator !== null) {\n      sessionParams.collaborator = row.collaborator;\n    }\n\n    if (row.emailVerified !== null) {\n      sessionParams.emailVerified = row.emailVerified;\n    }\n\n    if (row.expires) {\n      sessionParams.expires = row.expires.getTime();\n    }\n\n    if (row.scope) {\n      sessionParams.scope = row.scope;\n    }\n\n    if (row.accessToken) {\n      sessionParams.accessToken = row.accessToken;\n    }\n\n    return Session.fromPropertyArray(Object.entries(sessionParams), true);\n  }\n\n  private getSessionTable(): T['session'] {\n    return (this.prisma as any)[this.tableName];\n  }\n}\n\nexport class MissingSessionTableError extends Error {\n  constructor(\n    message: string,\n    public readonly cause: Error,\n  ) {\n    super(message);\n  }\n}\n\nexport class MissingSessionStorageError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nasync function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"],
  "mappings": "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",
  "names": []
}
